package com.foxconn.dpm.test;

import com.foxconn.dpm.util.MetaGetter;
import com.foxconn.dpm.util.batchData.BatchGetter;
import com.squareup.okhttp.OkHttpClient;
import com.tm.dl.javasdk.dpspark.DPSparkApp;
import com.tm.dl.javasdk.dpspark.common.DataTools;
import com.tm.dl.javasdk.dpspark.common.dpinterface.DPSparkBase;
import com.tm.dl.javasdk.dpspark.common.entity.HBTableEntity;
import com.tm.dl.javasdk.dpspark.common.entity.HBcolumnEntity;
import com.tm.dl.javasdk.dpspark.common.entity.HBcolumnfamilyEntity;
import com.tm.dl.javasdk.dpspark.es.DPEs;
import com.tm.dl.javasdk.dpspark.hbase.DPHbase;
import com.tm.dl.javasdk.dpspark.streaming.DPStreaming;
import javassist.NotFoundException;
import lombok.extern.log4j.Log4j;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.Cell;
import org.apache.hadoop.hbase.TableName;
import org.apache.hadoop.hbase.client.Put;
import org.apache.hadoop.hbase.client.Result;
import org.apache.hadoop.hbase.client.Scan;
import org.apache.hadoop.hbase.spark.JavaHBaseContext;
import org.apache.hadoop.hbase.util.Bytes;
import org.apache.hadoop.yarn.webapp.hamlet2.Hamlet;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.function.Function;
import org.apache.spark.broadcast.Broadcast;
import org.apache.spark.sql.types.DataTypes;
import org.apache.spark.sql.types.StructField;
import org.apache.spark.sql.types.StructType;
import scala.Tuple1;
import scala.Tuple2;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;

import static java.lang.Float.NaN;

/**
 * @author HS
 * @className Test
 * @description TODO
 * @date 2019/12/27 14:13
 */
public class Test {
    public static BatchGetter batchGetter = MetaGetter.getBatchGetter();

    public static void main(String[] args) throws Exception {
        String s = "";

/*
        String hbase_region_info = "safd-as131-wqer1-1asdf-a,as1awerwrew,1231151,hostname=slave2,16020,121515123";

        System.out.println(hbase_region_info.matches("^.*hostname=.*,[\\d]+,[\\d]+.*$"));
        System.out.println(hbase_region_info.indexOf("hostname="));
        String hostPort_step_1 = hbase_region_info.substring(hbase_region_info.indexOf("hostname="));
        String hostPort_step_2 = hostPort_step_1.substring(hostPort_step_1.indexOf(",") + 1);

        String hostname = hostPort_step_1.substring(0, hostPort_step_1.indexOf(",")).split("=")[1];
        String port = hostPort_step_2.substring(0, hostPort_step_2.indexOf(","));

        System.out.println(hostname + ":" + port);*/

        //System.out.println(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new Date(1577721700000L)));
//        System.out.println(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").parse("2019-12-28 00:00:00.000").getTime());
//        System.out.println(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").parse("2019-12-29 00:00:00.000").getTime());
//        System.out.println(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").parse("2019-12-30 00:00:00.000").getTime());
//        System.out.println(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").parse("2019-12-31 00:00:00.000").getTime());
//        System.out.println(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").parse("2020-01-01 00:00:00.000").getTime());
//        System.out.println(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").parse("2020-01-02 00:00:00.000").getTime());
//        System.out.println(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").parse("2020-01-03 00:00:00.000").getTime());
//        System.out.println(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").parse("2020-01-04 00:00:00.000").getTime());
//        System.out.println("------");
//        System.out.println(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").parse("2020-01-05 00:00:00.000").getTime());
//        System.out.println(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").parse("2020-01-06 00:00:00.000").getTime());
//        System.out.println(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").parse("2020-01-07 00:00:00.000").getTime());
//        System.out.println(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").parse("2020-01-08 00:00:00.000").getTime());
//        System.out.println(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").parse("2020-01-09 00:00:00.000").getTime());
//        System.out.println(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").parse("2020-01-10 00:00:00.000").getTime());
//        System.out.println(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").parse("2020-01-11 00:00:00.000").getTime());

//        System.out.println("set1".matches("set[A-Z$_]*"));
//        System.out.println("0.1".matches("\\d+[\\.]?\\d*[%]?"));
//        System.out.println("0.1%".matches("\\d+[\\.]?\\d*[%]?"));
//        System.out.println("0".matches("\\d+[\\.]?\\d*[%]?"));
//        System.out.println("100.1".matches("\\d+[\\.]?\\d*[%]?"));
//        System.out.println("100.1%%".matches("\\d+[\\.]?\\d*[%]?"));
       /* System.out.println("100.1%%".replaceAll("[^\\d]+", ""));


        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:00:00.000");
        String nowTime = format.format(new Date());
        Date nowTimeDate = format.parse(nowTime);
        String DSN_END_MIN = String.valueOf(nowTimeDate.getTime());

        Calendar calendar = Calendar.getInstance();
        calendar.setTime(nowTimeDate);
        calendar.add(Calendar.HOUR, -1);
        String DSN_START_MIN = String.valueOf(calendar.getTime().getTime());

        System.out.println(DSN_START_MIN + "_" + DSN_END_MIN);

  */

        StructType deftSchemaStruct = MetaGetter.getBeanGetter().getDeftSchemaStruct("dpm_ads_quality_fpy_week",
                new Tuple2<>(11, DataTypes.createStructField("block_code", DataTypes.StringType, true))
        );
        HashMap<String, StructField> schemaMap = MetaGetter.getBeanGetter().creDeftSchemaMap("dpm_ads_quality_fpy_week",
                DataTypes.createStructField("block_code", DataTypes.StringType, true)
        );
        Float a = 0f,c = 0f;
        try {

            c = a / 0;
        } catch (Exception e) {

        }
        System.out.println(c);
        System.out.println(Float.isNaN(c));
        System.out.println(batchGetter.formatFloat(c));

        System.out.println(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").parse("2020-07-08 00:00:00.000").getTime());
        System.out.println(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").parse("2020-07-10 00:00:00.000").getTime());
        System.out.println(new SimpleDateFormat("yyyy-MM-dd").parse("2020-05-05").getTime());

        System.out.println(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new Date(1594051200000L))
                + " " +
                new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new Date(1594224000000L))
        );
        /*
        System.out.println(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new Date(1592186627387L))
                + " " +
                new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new Date(1588780973510L))
        );
        System.out.println(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new Date(1587297601410L))
                + " " +
                new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new Date(1587304797580L))
        );
        System.out.println(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new Date(1587276002130L))
                + " " +
                new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new Date(1588694400000L))
        );
        System.out.println(batchGetter.getStDateDayAdd(-1, "-"));
        System.out.println(new SimpleDateFormat("yyy-MM-dd").parse(batchGetter.getStDateDayAdd(-1, "-")).getTime());
        //System.out.println(DateFormat.getDateInstance().parse("29/5/2020 09:38:25.113 AM"));
        System.out.println(new SimpleDateFormat("d/M/yyyy hh:mm:ss.SSS a", Locale.ENGLISH).format(new Date()));
//        System.out.println("00:1577808000000:WH:L5:"+UUID.randomUUID().toString());
        //System.out.println(System.currentTimeMillis());

        System.out.println(DateFormat.getDateInstance().parse("2020-05-31"));
        System.out.println(DateFormat.getDateInstance().parse("2020-05-32"));
        System.out.println(batchGetter.matchesData("2020-05-32"));
        System.out.println(batchGetter.matchesData("2020-05-31"));
        System.out.println("2020-05-32".matches("((^((1[8-9]\\d{2})|([2-9]\\d{3}))([-\\/\\._])(10|12|0?[13578])([-\\/\\._])(3[01]|[12][0-9]|0?[1-9])$)|(^((1[8-9]\\d{2})|([2-9]\\d{3}))([-\\/\\._])(11|0?[469])([-\\/\\._])(30|[12][0-9]|0?[1-9])$)|(^((1[8-9]\\d{2})|([2-9]\\d{3}))([-\\/\\._])(0?2)([-\\/\\._])(2[0-8]|1[0-9]|0?[1-9])$)|(^([2468][048]00)([-\\/\\._])(0?2)([-\\/\\._])(29)$)|(^([3579][26]00)([-\\/\\._])(0?2)([-\\/\\._])(29)$)|(^([1][89][0][48])([-\\/\\._])(0?2)([-\\/\\._])(29)$)|(^([2-9][0-9][0][48])([-\\/\\._])(0?2)([-\\/\\._])(29)$)|(^([1][89][2468][048])([-\\/\\._])(0?2)([-\\/\\._])(29)$)|(^([2-9][0-9][2468][048])([-\\/\\._])(0?2)([-\\/\\._])(29)$)|(^([1][89][13579][26])([-\\/\\._])(0?2)([-\\/\\._])(29)$)|(^([2-9][0-9][13579][26])([-\\/\\._])(0?2)([-\\/\\._])(29)$))"));
        System.out.println("2020-05-31".matches("((^((1[8-9]\\d{2})|([2-9]\\d{3}))([-\\/\\._])(10|12|0?[13578])([-\\/\\._])(3[01]|[12][0-9]|0?[1-9])$)|(^((1[8-9]\\d{2})|([2-9]\\d{3}))([-\\/\\._])(11|0?[469])([-\\/\\._])(30|[12][0-9]|0?[1-9])$)|(^((1[8-9]\\d{2})|([2-9]\\d{3}))([-\\/\\._])(0?2)([-\\/\\._])(2[0-8]|1[0-9]|0?[1-9])$)|(^([2468][048]00)([-\\/\\._])(0?2)([-\\/\\._])(29)$)|(^([3579][26]00)([-\\/\\._])(0?2)([-\\/\\._])(29)$)|(^([1][89][0][48])([-\\/\\._])(0?2)([-\\/\\._])(29)$)|(^([2-9][0-9][0][48])([-\\/\\._])(0?2)([-\\/\\._])(29)$)|(^([1][89][2468][048])([-\\/\\._])(0?2)([-\\/\\._])(29)$)|(^([2-9][0-9][2468][048])([-\\/\\._])(0?2)([-\\/\\._])(29)$)|(^([1][89][13579][26])([-\\/\\._])(0?2)([-\\/\\._])(29)$)|(^([2-9][0-9][13579][26])([-\\/\\._])(0?2)([-\\/\\._])(29)$))"));
        System.out.println(false & false);
        System.out.println(UUID.randomUUID().toString());*/
        //
//        Scan scan = new Scan();
//        scan.withStartRow("0".getBytes(), true);
//        scan.withStopRow("z".getBytes(), true);
//        JavaRDD<Result> resultJavaRDD = DPHbase.rddRead("dpm_dwd_production_output_day", scan, true);
//
//        resultJavaRDD.foreach(r->{
//            System.out.println(r);
//        });


      /*  ArrayList<String> a = new ArrayList<>();
        a.add("4CE0242K8P");
        a.add("4CE0242PBQ");
        a.add("4CE0242B4K");
        a.add("4CE0242NYK");
        a.add("4CE0242NXG");
        a.add("4CE0242HM8");
        a.add("4CE0242JNS");
        a.add("4CE0242JPY");
        a.add("4CE0242JRP");
        a.add("4CE0242HN4");
        a.add("4CE0242LXD");
        a.add("4CE0231V9Y");
        a.add("4CE0242NZL");
        a.add("4CE0242PM8");
        a.add("4CE0242N5D");
        a.add("4CE0242LBD");
        a.add("4CE0242PRC");
        a.add("4CE0242J51");
        a.add("4CE0242JVM");
        a.add("4CE0242PJC");
        a.add("4CE0242JC4");
        a.add("4CE0250SMP");
        a.add("4CE0242J6C");
        a.add("4CE0241LBV");
        a.add("4CE0241LF5");
        a.add("4CE0242J21");
        a.add("4CE0242JRG");
        a.add("4CE0242G4N");
        a.add("4CE0242PYW");
        a.add("4CE0242N2P");
        a.add("4CE0242PGF");
        a.add("4CE0242PN0");
        a.add("4CE0242PPY");
        a.add("4CE0242PNS");
        a.add("4CE0250SW8");
        a.add("4CE0250SQW");
        a.add("4CE0242NJB");
        a.add("4CE0250VRW");
        a.add("4CE0250VT7");
        a.add("4CE0231V9T");
        a.add("4CE0242LVX");
        a.add("4CE0242LWP");
        a.add("4CE0242H1V");
        a.add("4CE0231VBQ");
        a.add("4CE0242H3G");
        a.add("4CE0242GZG");
        a.add("4CE0242NYG");
        a.add("4CE0242HMD");
        a.add("4CE0242PPZ");
        a.add("4CE0242JMP");
        a.add("4CE0242P9D");
        a.add("4CE0242JDM");
        a.add("4CE0241L92");
        a.add("4CE0242P4M");
        a.add("4CE0242JBB");
        a.add("4CE0242NXV");
        a.add("4CE0250SR7");
        a.add("4CE0242N4F");
        a.add("4CE0242K6Y");
        a.add("4CE0250T4S");
        a.add("4CE0242HMB");
        a.add("4CE0242HNX");
        a.add("4CE0242GDV");
        a.add("4CE0250SX4");
        a.add("4CE0250SHK");
        a.add("4CE0250SMJ");
        a.add("4CE0250SV5");
        a.add("4CE0242LKH");
        a.add("4CE0250W2V");
        a.add("4CE0242GR0");
        a.add("4CE0242GTD");
        a.add("4CE0242GSS");
        a.add("4CE0242QCX");
        a.add("4CE0242LJG");
        a.add("4CE0242M1D");
        a.add("4CE0242LW3");
        a.add("4CE0242LXL");
        a.add("4CE0242LY8");
        a.add("4CE0242M24");
        a.add("4CE0242LYN");
        a.add("4CE0242LX2");
        a.add("4CE0242M12");
        a.add("4CE0242LVT");
        a.add("4CE0242LWB");
        a.add("4CE0242LWQ");
        a.add("4CE0242NJ9");
        a.add("4CE0242PXC");
        a.add("4CE0242NJ2");
        a.add("4CE0242PBM");
        a.add("4CE0242P8V");
        a.add("4CE0242P4W");
        a.add("4CE0242N7K");
        a.add("4CE0242LBD");
        a.add("4CE0242GXD");
        a.add("4CE0250SMJ");
        a.add("4CE0250SNL");
        a.add("4CE0242PQ5");
        a.add("4CE0242PNF");
        a.add("4CE0250VD9");
        a.add("4CE0250VH1");
        a.add("4CE0241Y49");
        a.add("4CE0250TV3");
        a.add("4CE0250SR0");
        a.add("4CE0242H4R");
        a.add("4CE0242NH6");
        a.add("4CE0250SXG");
        a.add("4CE0250VPT");
        a.add("4CE0250WND");
        a.add("4CE0241LCD");
        a.add("4CE0250TZK");
        a.add("4CE0242Q0T");
        a.add("4CE0242P2T");
        a.add("4CE0242J3N");
        a.add("4CE0242PHB");
        a.add("4CE0250SKP");
        a.add("4CE0250VJ1");
        a.add("4CE0250VMB");
        a.add("4CE0250TVG");
        a.add("4CE0242JL6");
        a.add("4CE0242PSB");
        a.add("4CE0242PG9");
        a.add("4CE0250V49");
        a.add("4CE0250XJR");
        a.add("4CE0250ZFZ");
        a.add("4CE0250ZF8");
        a.add("4CE0250T00");
        a.add("4CE0242LBD");
        a.add("4CE0250T1P");
        a.add("4CE0250TDJ");
        a.add("4CE0250VQZ");
        a.add("4CE0250T8T");
        a.add("4CE0250TFX");
        a.add("4CE0250T47");
        a.add("4CE0250WJ7");
        a.add("4CE0250WH9");
        a.add("4CE0250WGM");
        a.add("4CE0250WN8");
        a.add("4CE0250WF2");
        a.add("4CE0242JKQ");
        a.add("4CE0250VQS");
        a.add("4CE025101T");
        a.add("4CE0250X8T");
        a.add("4CE0250X5S");
        a.add("4CE0250Z42");
        a.add("4CE0250ZXG");
        a.add("4CE0250ZNQ");
        a.add("4CE0250YPV");
        a.add("4CE0242HQ9");
        a.add("4CE0242NZQ");
        a.add("4CE0251074");
        a.add("4CE0250YB6");
        a.add("4CE0250ZNV");
        a.add("4CE0250SKP");
        a.add("4CE0250WLQ");
        a.add("4CE0250SQC");
        a.add("4CE025109W");
        a.add("4CE025108V");
        a.add("4CE025108D");
        a.add("4CE0250WS0");
        a.add("4CE02424GF");
        a.add("4CE0242LP9");
        a.add("4CE02429M6");
        a.add("4CE02429M1");
        a.add("4CE02429LZ");
        a.add("4CE02429M7");
        a.add("4CE0242NLM");
        a.add("4CE0242NQJ");
        a.add("4CE02429TN");
        a.add("4CE02429TN");
        a.add("4CE0242M50");
        a.add("4CE0242M5L");
        a.add("4CE0193YQK");
        a.add("4CE0242LR7");
        a.add("4CE0242L7N");
        a.add("4CE0242KDW");
        a.add("4CE0193YT2");
        a.add("4CE0242NPS");
        a.add("4CE0193YPX");
        a.add("4CE0193YPY");
        a.add("4CE0242MVN");
        a.add("4CE0250XVG");
        a.add("4CE0242LNN");
        a.add("4CE0193YTX");
        a.add("4CE0250YCV");
        a.add("4CE0250TLQ");
        a.add("4CE0250ZDG");
        a.add("4CE0193YPR");
        a.add("4CE02429T7");
        a.add("4CE02429TZ");
        a.add("4CE0250XW4");
        a.add("4CE0242MG7");
        a.add("4CE0250YHP");
        a.add("4CE0242LK8");
        a.add("4CE0242LMN");
        a.add("4CE0242PX0");
        a.add("4CE0242P3L");
        a.add("4CE0242G67");
        a.add("4CE0242G32");
        a.add("4CE0242N7W");
        a.add("4CE0242PH3");
        a.add("4CE0242PK8");
        a.add("4CE0242N6W");
        a.add("4CE0242LJR");
        a.add("4CE0242LJ1");
        a.add("4CE0242GDC");
        a.add("4CE0242GDS");
        a.add("4CE0242G93");
        a.add("4CE0242LNB");
        a.add("4CE0242PS2");
        a.add("4CE0242N1P");
        a.add("4CE0242NHM");
        a.add("4CE0242LH5");
        a.add("4CE0242NVL");
        a.add("4CE0242PCG");
        a.add("4CE0242N7D");
        a.add("4CE0242P5J");
        a.add("4CE0242PQL");
        a.add("4CE0242N7Q");
        a.add("4CE0242N50");
        a.add("4CE0242LND");
        a.add("4CE0242LK2");
        a.add("4CE0242LGL");
        a.add("4CE0242PQJ");
        a.add("4CE0241LGP");
        a.add("4CE0242N60");
        a.add("4CE0242N3T");
        a.add("4CE0242N6J");
        a.add("4CE0242Q08");
        a.add("4CE0242P5F");
        a.add("4CE0242N6M");
        a.add("4CE0242N2R");
        a.add("4CE0242MSM");
        a.add("4CE0242MRY");
        a.add("4CE0242NCP");
        a.add("4CE0242LQZ");
        a.add("4CE0242LP3");
        a.add("4CE0242NCJ");
        a.add("4CE0242GG5");
        a.add("4CE0242KFF");
        a.add("4CE0242GS8");
        a.add("4CE0193YT2");
        a.add("4CE0250SYF");
        a.add("4CE0250SZS");
        a.add("4CE0250SZ9");
        a.add("4CE0250SY4");
        a.add("4CE0242PZT");
        a.add("4CE0242MSV");
        a.add("4CE0193YVQ");
        a.add("4CE0250T15");
        a.add("4CE0193YSK");
        a.add("4CE0250ZDL");
        a.add("4CE0250TDR");
        a.add("4CE0242N4R");
        a.add("4CE0242PL7");
        a.add("4CE0242N6Y");
        a.add("4CE0250TJH");
        a.add("4CE0250SG8");
        a.add("4CE0242N41");
        a.add("4CE0242N3P");
        a.add("4CE0242N61");
        a.add("4CE0242LJS");
        a.add("4CE0242LLH");
        a.add("4CE0250SQG");
        a.add("4CE0250TH5");
        a.add("4CE0242N25");
        a.add("4CE0242Q1S");
        a.add("4CE0242LKQ");
        a.add("4CE0242LKD");
        a.add("4CE0242LMK");
        a.add("4CE0242GR5");
        a.add("4CE0242GQH");
        a.add("4CE0250YD4");
        a.add("4CE0242GWC");
        a.add("4CE0242GWL");
        a.add("4CE0242GRD");
        a.add("4CE0250W0B");
        a.add("4CE0250W02");
        a.add("4CE0242LLM");
        a.add("4CE0242Q1L");
        a.add("4CE0242PJ4");
        a.add("4CE0242P8L");
        a.add("4CE0250TYJ");
        a.add("4CE0250SLS");
        a.add("4CE0250TY5");
        a.add("4CE0242LJ6");
        a.add("4CE0250XLW");
        a.add("4CE0250XM6");
        a.add("4CE0242KFG");
        a.add("4CE0242NCP");
        a.add("4CE0242GQH");
        a.add("4CE0250SF7");
        a.add("4CE0242PQJ");
        a.add("4CE02429TB");
        a.add("4CE0242N0S");
        a.add("4CE0242N14");
        a.add("4CE0242MVT");
        a.add("4CE0242Q6D");
        a.add("4CE0242MR5");
        a.add("4CE0242Q8Q");
        a.add("4CE0242LPB");
        a.add("4CE0242MR6");
        a.add("4CE0242MNX");
        a.add("4CE0242H5V");
        a.add("4CE0242LTS");
        a.add("4CE0242NL0");
        a.add("4CE0242NLR");
        a.add("4CE02429LP");
        a.add("4CE0242GKD");
        a.add("4CE0242Q74");
        a.add("4CE0242Q7M");
        a.add("4CE0242MP1");
        a.add("4CE0250YCR");
        a.add("4CE0242Q7P");
        a.add("4CE0242KFD");
        a.add("4CE02429TR");
        a.add("4CE0242MNW");
        a.add("4CE0242MR5");
        a.add("4CE0242N9W");
        a.add("4CE0242LNZ");
        a.add("4CE0250XDT");
        a.add("4CE0250YJ9");
        a.add("4CE0242QH0");
        a.add("4CE0250XVD");
        a.add("4CE0242N1F");
        a.add("4CE0250XDG");
        a.add("4CE0193YQ2");
        a.add("4CE0242GMZ");
        a.add("4CE0193YS2");
        a.add("4CE0193YSK");
        a.add("4CE0193YQL");
        a.add("4CE0193YVQ");
        a.add("4CE0250XLR");
        a.add("4CE02429RS");
        a.add("4CE0250TP1");
        a.add("4CE0250Z79");
        a.add("4CE0250XLW");
        a.add("YLX0TTFP");
        a.add("YLX0TVQY");
        a.add("YL00XN4N");
        a.add("YLX0TTNE");
        a.add("YL00XNE1");
        a.add("YL00XN4M");
        a.add("YLX0TRPN");
        a.add("YLX0TR4C");
        a.add("YL00XNY8");
        a.add("YLX0TVQ8");
        a.add("YLX0TSCG");
        a.add("YL00XN88");
        a.add("YLX0TSDR");
        a.add("YL00XPQQ");
        a.add("YL00XPCM");
        a.add("YL00XPCF");
        a.add("YLX0TWEK");


        ArrayList<String> b = new ArrayList<>();
        b.add("YL00XPGD");
        b.add("4CE0242B3Y");
        b.add("4CE0242J3T");
        b.add("4CE0242B14");
        b.add("4CE0242JM4");
        b.add("4CE0242NVL");
        b.add("4CE0242LBD");
        b.add("4CE0242LP3");
        b.add("4CE0242N4F");
        b.add("4CE0242MNW");
        b.add("4CE0250SYF");
        b.add("4CE0250YJ9");
        b.add("4CE0242P8L");
        b.add("4CE0242HZR");
        b.add("4CE0242LDR");
        b.add("4CE0242K8P");
        b.add("4CE0242JG3");
        b.add("4CE0242KX4");
        b.add("4CE0242FZY");
        b.add("4CE0242JST");
        b.add("4CE0242J7G");
        b.add("4CE0242N0R");
        b.add("4CE0242JDM");
        b.add("4CE0242NCP");
        b.add("4CE0193YQK");
        b.add("4CE0242GR0");
        b.add("4CE0250SG8");
        b.add("4CE0242LLH");
        b.add("4CE0242PNF");
        b.add("4CE0250ZDG");
        b.add("4CE0242HVF");
        b.add("4CE0242HMJ");
        b.add("4CE0242JN3");
        b.add("4CE0242PM8");
        b.add("4CE0242NZL");
        b.add("4CE0242N6W");
        b.add("4CE0242G4N");
        b.add("4CE0242NHM");
        b.add("4CE0250XVD");
        b.add("4CE0250SV5");
        b.add("4CE0242LKD");
        b.add("4CE0250TY5");
        b.add("4CE0250SXG");
        b.add("4CE0242HX4");
        b.add("4CE0242LBL");
        b.add("4CE0242KY6");
        b.add("4CE0242B4W");
        b.add("4CE0242K9C");
        b.add("4CE0242JMW");
        b.add("4CE0242K8P");
        b.add("4CE0231V9Y");
        b.add("4CE0242LW3");
        b.add("4CE0242JBB");
        b.add("4CE0242G67");
        b.add("4CE0242G93");
        b.add("4CE0242GDS");
        b.add("4CE0242PYW");
        b.add("4CE02429TN");
        b.add("4CE0242GSS");
        b.add("4CE0250T4S");
        b.add("4CE0242B4K");
        b.add("4CE0242N61");
        b.add("4CE0242QCX");
        b.add("4CE0193YQ2");
        b.add("4CE0242N25");
        b.add("4CE0242Q1S");
        b.add("4CE0242N7K");
        b.add("4CE0193YPR");
        b.add("4CE0250TV3");
        b.add("4CE0242KSQ");
        b.add("4CE0242LC8");
        b.add("4CE0242MPJ");
        b.add("4CE0242J34");
        b.add("4CE0242KD9");
        b.add("4CE0242MXN");
        b.add("4CE0242JNS");
        b.add("4CE0242MR5");
        b.add("4CE0242LJR");
        b.add("4CE02429TN");
        b.add("4CE0242N7Q");
        b.add("4CE0241LGP");
        b.add("4CE0242MSM");
        b.add("4CE0193YT2");
        b.add("4CE0242NCJ");
        b.add("4CE0242K6Y");
        b.add("4CE0242QH0");
        b.add("4CE0242PXC");
        b.add("4CE0250VH1");
        b.add("4CE0241Y49");
        b.add("4CE0250SR0");
        b.add("4CE0242MMS");
        b.add("4CE0242KBS");
        b.add("4CE02429TZ");
        b.add("4CE02429ZD");
        b.add("4CE0242J7F");
        b.add("4CE02429T7");
        b.add("4CE0242LWP");
        b.add("4CE0242H3G");
        b.add("4CE0242H5V");
        b.add("4CE0242NLR");
        b.add("4CE0242GKD");
        b.add("4CE0242LJS");
        b.add("4CE0193YS2");
        b.add("4CE0242NH6");
        b.add("4CE0242HYZ");
        b.add("4CE0242HZ9");
        b.add("4CE0242JSY");
        b.add("4CE0242J6G");
        b.add("4CE0242H1V");
        b.add("4CE0242NYG");
        b.add("4CE0231V9T");
        b.add("4CE0242PRC");
        b.add("4CE0242M24");
        b.add("4CE02429M7");
        b.add("4CE0242LMN");
        b.add("4CE0242PX0");
        b.add("4CE0242GDC");
        b.add("4CE0242PGF");
        b.add("4CE0250SMP");
        b.add("4CE0242LH5");
        b.add("4CE0242N6J");
        b.add("4CE0242M50");
        b.add("4CE0242NL0");
        b.add("4CE0242L7N");
        b.add("4CE0250T15");
        b.add("4CE0193YTX");
        b.add("4CE0242P8V");
        b.add("4CE0242B2F");
        b.add("4CE0242F4R");
        b.add("4CE0241L9P");
        b.add("4CE0242LZ3");
        b.add("4CE0242JRP");
        b.add("4CE02429TB");
        b.add("4CE0242LWQ");
        b.add("4CE02429LZ");
        b.add("4CE0242PS2");
        b.add("4CE0242MVT");
        b.add("4CE0242Q74");
        b.add("4CE0242PPY");
        b.add("4CE0193YVQ");
        b.add("4CE0193YPY");
        b.add("4CE0250YD4");
        b.add("4CE0250VPT");
        b.add("4CE02425WB");
        b.add("4CE0242JCC");
        b.add("4CE0242JGD");
        b.add("4CE0242JJZ");
        b.add("4CE0242J26");
        b.add("4CE0241LB6");
        b.add("4CE0241LBV");
        b.add("4CE0242LJG");
        b.add("4CE0242PNS");
        b.add("4CE0250XDT");
        b.add("4CE0242LB9");
        b.add("4CE0242LCB");
        b.add("4CE0242B2D");
        b.add("4CE0242MC8");
        b.add("4CE0241L86");
        b.add("4CE0242JRT");
        b.add("4CE0242J2T");
        b.add("4CE0242J8S");
        b.add("4CE0242CP6");
        b.add("YLX0TVX9");
        b.add("4CE0242N5D");
        b.add("4CE0242M12");
        b.add("4CE0242MNX");
        b.add("4CE0242JMP");
        b.add("4CE0242JRG");
        b.add("4CE0242J6C");
        b.add("4CE0242LGL");
        b.add("4CE0242MRY");
        b.add("4CE0242N60");
        b.add("4CE02424GF");
        b.add("4CE0242M1D");
        b.add("4CE0242LQZ");
        b.add("YL00XNMM");
        b.add("4CE0242LNN");
        b.add("4CE0250SHK");
        b.add("4CE0242NJ2");
        b.add("4CE0250XDG");
        b.add("4CE0250SLS");
        b.add("4CE0242LGM");
        b.add("4CE0242MS2");
        b.add("4CE02429ZP");
        b.add("4CE0242B4J");
        b.add("4CE0241L9K");
        b.add("4CE0242KFH");
        b.add("4CE0242FX3");
        b.add("4CE0242P9D");
        b.add("4CE0242LNB");
        b.add("4CE0242Q7M");
        b.add("4CE0242N50");
        b.add("4CE0242PCG");
        b.add("4CE0242PQL");
        b.add("4CE0242PQJ");
        b.add("4CE0242GS8");
        b.add("4CE0242PBQ");
        b.add("4CE0242NJB");
        b.add("4CE0242N3P");
        b.add("4CE0242PBM");
        b.add("4CE0242PJ4");
        b.add("4CE0242JBC");
        b.add("4CE0242B4Y");
        b.add("4CE0242JPY");
        b.add("4CE0242N0S");
        b.add("4CE0242LTS");
        b.add("4CE0242NLM");
        b.add("4CE0242P5J");
        b.add("4CE0242KFD");
        b.add("YL00XPQ2");
        b.add("4CE0193YSK");
        b.add("4CE0250SX4");
        b.add("4CE0242N41");
        b.add("4CE0250SMJ");
        b.add("4CE0250SQG");
        b.add("4CE0250XLW");
        b.add("4CE0242B40");
        b.add("4CE0242JF3");
        b.add("4CE0242B1J");
        b.add("4CE0242LQX");
        b.add("4CE0242B46");
        b.add("4CE0242NYK");
        b.add("4CE0242LVX");
        b.add("YLX0TVXQ");
        b.add("4CE0242Q8Q");
        b.add("4CE0242PJC");
        b.add("4CE0242JVM");
        b.add("4CE0242J51");
        b.add("4CE0242JC4");
        b.add("4CE0250SW8");
        b.add("4CE0242HMB");
        b.add("4CE0242PZT");
        b.add("4CE0242NPS");
        b.add("4CE0193YPX");
        b.add("4CE0242GTD");
        b.add("4CE0193YSK");
        b.add("4CE0242N4R");
        b.add("4CE0242N1F");
        b.add("4CE0242LKQ");
        b.add("4CE0242LMK");
        b.add("4CE0242GMZ");
        b.add("4CE0250SMJ");
        b.add("3CQ02502KK");
        b.add("CN0F90WNFCC0006FCW2B");
        b.add("61E9GAT6WLV9069C8A");
        b.add("CN0FTGC7FCC0006FC2PB");
        b.add("61E9GAT6WLV9069BLC");
        b.add("3CQ02501W7");
        b.add("3CQ0250411");
        b.add("3CQ0241VDH");
        b.add("CN0JHKTDFCC0006FC7MI");
        b.add("61C3MAR6WWV906991C");
        b.add("3CQ02502X4");
        b.add("JMM195TIA122406F13937");
        b.add("3CQ025043X");
        b.add("61DDUAR6USV9069B88");
        b.add("1S61C0ACR6CAU1HCH517");
        b.add("3CQ0241XHF");
        b.add("3CQ025030M");
        b.add("1S61C0ACR6CAU9HCH7M9");
        b.add("3CQ02503G3");
        b.add("CN0W6XYPFCC0006FC5EI");
        b.add("3CQ02503S9");
        b.add("3CQ025045R");
        b.add("CN0JHKTDFCC0006FCUAI");
        b.add("CN0265C3FCC0006FD86I");
        b.add("61FBMAR6USV9069H95");
        b.add("3CQ0250467");
        b.add("3CQ02501P1");
        b.add("3CQ0241Y7V");
        b.add("61C3MAR6WWV90699B9");
        b.add("JMM195TIA122406F14050");
        b.add("CN0W6XYPFCC0006CCE3I");
        b.add("3CQ0250277");
        b.add("CN0W6XYPFCC0006FC5PI");
        b.add("61C3MAR6WWV90699VZ");
        b.add("3CQ0241Y16");
        b.add("JMM195TIA122406F13838");
        b.add("3CQ02502TS");
        b.add("3CQ025015S");
        b.add("3CQ02501GN");
        b.add("1S61C0ACR6CAU9HCH6MA");
        b.add("1S61C0ACR6CAU1HCH59F");
        b.add("3CQ0250389");
        b.add("61FBMAR6USV9069HNP");
        b.add("3CQ02503YP");
        b.add("JMM195TIA122406F14437");
        b.add("JMM195TIA122406F13231");
        b.add("3CQ02503TV");
        b.add("3CQ025058R");
        b.add("CN078JPVFCC0006FANWB");
        b.add("3CQ0250439");
        b.add("CN0W6XYPFCC0006CD0RI");
        b.add("3CQ02502T3");
        b.add("3CQ025045D");
        b.add("CN0FTGC7FCC0006FAE2B");
        b.add("3CQ025045J");
        b.add("JMM195TIA122406F11651");
        b.add("JMM195TIA122406F14120");
        b.add("CN0FTGC7FCC0006FAAEB");
        b.add("1S61C0ACR6CAU9HCH833");
        b.add("JMM195TIA122406F13908");
        b.add("JMM195TIA122406F11670");
        b.add("CN0F90WNFCC0006FD7TB");
        b.add("3CQ0241VMS");
        b.add("3CQ0241XKD");
        b.add("CN0JHKTDFCC0006FCE0I");
        b.add("3CQ02501BB");
        b.add("3CQ025038F");
        b.add("CN0W6XYPFCC0006FC54I");
        b.add("CN0W6XYPFCC0006FCMKU");
        b.add("61C3MAR6WWV90699D0");
        b.add("CN0W6XYPFCC0006CCHWU");
        b.add("3CQ02503BX");
        b.add("CN0F90WNFCC0006FDM6B");
        b.add("61E9GAT6WLV9069CAR");
        b.add("3CQ02500QZ");
        b.add("3CQ025044K");
        b.add("1S61C0ACR6CAU1HCH509");
        b.add("61C3MAR6WWV90699M5");
        b.add("61E9GAT6WLV9069BNL");
        b.add("3CQ02503GH");
        b.add("3CQ02503XM");
        b.add("1S61C0ACR6CAU1HCH30W");
        b.add("3CQ02502T1");
        b.add("3CQ0241XL6");
        b.add("JMM195TIA122406F11863");
        b.add("CN0265C3FCC0006FCM8I");
        b.add("3CQ02501HD");
        b.add("3CQ02503RH");
        b.add("61C3MAR6WWV9069955");
        b.add("3CQ02503R2");
        b.add("3CQ02502T1");
        b.add("3CQ0250450");
        b.add("61FBMAR6USV9069HTN");
        b.add("JMM195TIA122406F14302");
        b.add("3CQ02502VL");
        b.add("3CQ025043L");
        b.add("CN0W6XYPFCC0006CC2CI");
        b.add("3CQ0241WFK");
        b.add("JMM195TIA122406F13125");
        b.add("3CQ02502TF");
        b.add("3CQ02502S4");
        b.add("JMM195TIA122406F13968");
        b.add("CN0W6XYPFCC0006CD0RI");
        b.add("3CQ02501MZ");
        b.add("3CQ0241VDH");
        b.add("3CQ02500PT");
        b.add("JMM195TIA122406F13803");
        b.add("61E9GAT6WLV9069CNG");
        b.add("1S61C0ACR6CAU9HCH83M");
        b.add("3CQ0241V9F");
        b.add("CN00F0RPFCC0006GAD7D");
        b.add("3CQ0241Y7N");
        b.add("CN0JHKTDFCC0006FCRMI");
        b.add("61FBMAR6USV9069H91");
        b.add("CN0F1XP0FCC0006FA86D");
        b.add("3CQ02500T2");
        b.add("3CQ025030L");
        b.add("3CQ02503NC");
        b.add("3CQ02503XH");
        b.add("0F005496");
        b.add("1S61C0ACR6CAU1HCH57X");
        b.add("JMM195TIA122406F11913");
        b.add("3CQ025045H");
        b.add("3CQ025045F");
        b.add("3CQ025045B");
        b.add("CN0FTGC7FCC0006FAWLB");
        b.add("3CQ02503QY");
        b.add("3CQ02502Y3");
        b.add("CN0265C3FCC0006FD1DI");
        b.add("3CQ025018R");
        b.add("3CQ0250421");
        b.add("CN0265C3FCC0006FA1PI");
        b.add("3CQ02502T4");
        b.add("3CQ02503W7");
        b.add("3CQ02501MT");
        b.add("CN0FTGC7FCC0006FAGMB");
        b.add("3CQ02503YF");
        b.add("JMM195TIA122406F11715");
        b.add("CN0W6XYPFCC0006CAU3I");
        b.add("3CQ0241XHX");
        b.add("3CQ025042B");
        b.add("1S61C0ACR6CAU9HCH833");
        b.add("3CQ02503RZ");
        b.add("CN0F90WNFCC0006FCNWB");
        b.add("3CQ02503FC");
        b.add("3CQ02503YF");
        b.add("61E9GAT6WLV9069C62");
        b.add("CN0JHKTDFCC0006FC9HI");
        b.add("3CQ0250319");
        b.add("CN0FTGC7FCC0006FAJUB");
        b.add("3CQ02502VG");
        b.add("3CQ0241Y1H");
        b.add("3CQ02501B0");
        b.add("4CE0242KNM");
        b.add("4CE0242KKP");
        b.add("4CE0242L8B");
        b.add("4CE0242FYJ");
        b.add("4CE0242JT0");
        b.add("4CE0242PNQ");
        b.add("YLX0TTFP");
        b.add("4CE0242LPB");
        b.add("4CE0242N14");
        b.add("4CE0242NQJ");
        b.add("4CE0242N2P");
        b.add("4CE0250SR7");
        b.add("4CE0242N2R");
        b.add("4CE0242Q08");
        b.add("4CE0242GG5");
        b.add("4CE0250W2V");
        b.add("4CE0250TDR");
        b.add("4CE0242PL7");
        b.add("4CE0250XVG");
        b.add("YL00XPKC");
        b.add("4CE0242LKH");
        b.add("4CE0250TLQ");
        b.add("4CE0242GRD");
        b.add("4CE0242LJ6");
        b.add("4CE0250TYJ");
        b.add("4CE0250XM6");
        b.add("3CQ0250410");
        b.add("3CQ02501MY");
        b.add("3CQ02503XB");
        b.add("61DDUAR6USV9069AEG");
        b.add("1S61B7MCR6CAU5HCGZX2");
        b.add("3CQ025041N");
        b.add("3CQ02503XM");
        b.add("3CQ0241Y1L");
        b.add("CN0FTGC7FCC0006FCH3B");
        b.add("CN0W6XYPFCC0006FCNKU");
        b.add("61C3MAR6WWV90699T6");
        b.add("3CQ0250386");
        b.add("3CQ02502T5");
        b.add("3CQ02501JX");
        b.add("1S61C0ACR6CAU1HCH3G4");
        b.add("3CQ02501JS");
        b.add("CN0R63MCFCC0006FAFYB");
        b.add("3CQ02503F4");
        b.add("3CQ025038J");
        b.add("CN0W6XYPFCC0006CD27I");
        b.add("CN0W6XYPFCC0006FA2UI");
        b.add("3CQ025019G");
        b.add("3CQ0241WFB");
        b.add("1S61C0ACR6CAU9HCH89X");
        b.add("3CQ02501KB");
        b.add("61C3MAR6WWV90699B9");
        b.add("CN0R63MCFCC0006FAPHB");
        b.add("3CQ02503X3");
        b.add("3CQ02503WX");
        b.add("3CQ02501DJ");
        b.add("61C3MAR6WWV906998R");
        b.add("CN0FTGC7FCC0006FA71B");
        b.add("3CQ02502ZL");
        b.add("CN0R63MCFCC0006FAM1B");
        b.add("1S61C0ACR6CAU9HCH848");
        b.add("3CQ0241XHD");
        b.add("1S61C0ACR6CAU1HCH37N");
        b.add("61E9GAT6WLV9069C3C");
        b.add("1S61C0ACR6CAU9HCH74B");
        b.add("3CQ02503BX");
        b.add("CN078JPVFCC0006FC97B");
        b.add("61C3MAR6WWV90699D6");
        b.add("CN0W6XYPFCC0006CD0EI");
        b.add("3CQ025031P");
        b.add("1S61C0ACR6CAU1HCH5C8");
        b.add("JMM195TIA122406F11948");
        b.add("61DDUAR6USV9069A0F");
        b.add("61E9GAT6WLV9069BE2");
        b.add("3CQ0241Y13");
        b.add("3CQ0241Y12");
        b.add("CN0W6XYPFCC0006CAP2I");
        b.add("CN0F90WNFCC0006FCNWB");
        b.add("1S61C0ACR6CAU9HCH6GD");
        b.add("3CQ02502VK");
        b.add("3CQ02503R4");
        b.add("61E9GAT6WLV9069C43");
        b.add("61EAGAR6USV90698B4");
        b.add("61FBMAR6USV9069HNP");
        b.add("3CQ025041W");
        b.add("3CQ02500L4");
        b.add("3CQ025042M");
        b.add("3CQ025042H");
        b.add("CN0JHKTDFCC0006FCLMI");
        b.add("3CQ02503C9");
        b.add("JMM195TIA122406F11517");
        b.add("3CQ02501FM");
        b.add("3CQ02503CT");
        b.add("CN0W6XYPFCC0006FD05U");
        b.add("3CQ025045M");
        b.add("3CQ02503S4");
        b.add("3CQ02502V9");
        b.add("CN0W6XYPFCC0006FC54I");
        b.add("CN0W6XYPFCC0006FA8CI");
        b.add("3CQ02503Y2");
        b.add("3CQ0250447");
        b.add("61FBMAR6USV9069HTK");
        b.add("3CQ0241V4D");
        b.add("CN0265C3FCC0006FA1PI");
        b.add("3CQ02504PZ");
        b.add("3CQ02503MF");
        b.add("3CQ02503ZM");
        b.add("JMM195TIA122406F13762");
        b.add("JMM195TIA122406F13411");
        b.add("JMM195TIA122406F14367");
        b.add("CN0FTGC7FCC0006FA9CB");
        b.add("3CQ02501HG");
        b.add("3CQ02502ZX");
        b.add("4CE0242MV0");
        b.add("4CE0242MS7");
        b.add("4CE0242J41");
        b.add("4CE0242B3W");
        b.add("4CE0242J0N");
        b.add("4CE0242JFN");
        b.add("4CE0241LFD");
        b.add("4CE0242B06");
        b.add("4CE02429ZQ");
        b.add("4CE0242JDF");
        b.add("4CE0242GZG");
        b.add("4CE0242HMD");
        b.add("4CE0241L92");
        b.add("4CE0242P3L");
        b.add("4CE0250YCR");
        b.add("4CE0242NXV");
        b.add("4CE0242N3T");
        b.add("4CE0242N9W");
        b.add("4CE0242GQH");
        b.add("4CE0242GWL");
        b.add("4CE0242PQ5");
        b.add("YLX0TTFP");
        b.add("4CE0242LBQ");
        b.add("4CE0242B31");
        b.add("4CE0231V8B");
        b.add("4CE0242B2X");
        b.add("4CE0242JBF");
        b.add("4CE0242LXD");
        b.add("4CE0242HM8");
        b.add("4CE0242LP9");
        b.add("4CE0242LWB");
        b.add("4CE0242MR6");
        b.add("4CE0242P4M");
        b.add("4CE0242Q8Q");
        b.add("4CE02429LP");
        b.add("4CE0242G32");
        b.add("4CE0242PH3");
        b.add("4CE0242PK8");
        b.add("YL00XMK9");
        b.add("4CE0242P5F");
        b.add("4CE0242KFF");
        b.add("4CE02429TR");
        b.add("4CE0250SY4");
        b.add("4CE0250SZS");
        b.add("4CE0242LNZ");
        b.add("4CE0250ZDL");
        b.add("4CE0250VRW");
        b.add("4CE0250VT7");
        b.add("4CE0250SNL");
        b.add("4CE0242P4W");
        b.add("4CE0242Q1L");
        b.add("YLX0TTFP");
        b.add("4CE0242HVH");
        b.add("4CE0242KXF");
        b.add("4CE0242F4X");
        b.add("4CE0242J6W");
        b.add("4CE0242J61");
        b.add("4CE0242JPV");
        b.add("4CE0242P0Y");
        b.add("4CE0242HN4");
        b.add("4CE0242NXG");
        b.add("4CE0242N7W");
        b.add("4CE0242N1P");
        b.add("4CE0242N6M");
        b.add("4CE0242NL0");
        b.add("4CE0242MSV");
        b.add("4CE0250ZDL");
        b.add("4CE0242LLM");
        b.add("4CE0250W02");
        b.add("4CE0250W0B");
        b.add("4CE0242KSS");
        b.add("4CE0242NXF");
        b.add("4CE0241LCH");
        b.add("4CE0242JFR");
        b.add("4CE0242JJW");
        b.add("4CE0242G65");
        b.add("4CE0242LVT");
        b.add("4CE0242LXL");
        b.add("4CE0242LJ1");
        b.add("4CE0242LK8");
        b.add("4CE0242MP1");
        b.add("4CE0241LF5");
        b.add("4CE0242LK2");
        b.add("4CE0242LND");
        b.add("4CE0242LR7");
        b.add("4CE0242KDW");
        b.add("4CE0242GDV");
        b.add("4CE0250SZ9");
        b.add("4CE0242HNX");
        b.add("4CE0250SQW");
        b.add("4CE0250T15");
        b.add("4CE0250TDR");
        b.add("4CE0242N6Y");
        b.add("4CE0242MVN");
        b.add("4CE0250TJH");
        b.add("4CE0242NJ9");
        b.add("4CE0250VD9");
        b.add("4CE02429L9");
        b.add("4CE0242H7C");
        b.add("4CE0242HWX");
        b.add("4CE0242J0T");
        b.add("4CE0242MN9");
        b.add("4CE0242K76");
        b.add("4CE0242B0B");
        b.add("4CE0242HSW");
        b.add("4CE0242G4S");
        b.add("4CE0242G54");
        b.add("4CE0242JFD");
        b.add("4CE0242B28");
        b.add("YLX0TTFP");
        b.add("4CE0231VBQ");
        b.add("4CE0242LYN");
        b.add("4CE0242PPZ");
        b.add("4CE02429M1");
        b.add("4CE0242N7D");
        b.add("4CE0242Q7P");
        b.add("4CE0242M5L");
        b.add("4CE0242PN0");
        b.add("4CE0193YVQ");
        b.add("4CE0242GR5");
        b.add("4CE0250TH5");
        b.add("4CE0242GWC");
        b.add("4CE0242H4R");
        b.add("4CE0242HY4");
        b.add("4CE0242MCN");
        b.add("4CE0242B2V");
        b.add("4CE0242B44");
        b.add("4CE0242JHX");
        b.add("4CE0242LX2");
        b.add("4CE0242Q6D");
        b.add("4CE0242J21");
        b.add("4CE0242LBD");

        for (String av : a) {
            String temp = "";
            for (String bv : b) {
                if (av.equals(bv)){
                    temp = av;
                    break;
                }
            }
            if ("".equals(temp)){
                System.out.println(av);
            }
        }
*/
    }


    public static void rddWrite(String tableName, JavaRDD<Put> puts) throws Exception {
        HBTableEntity hbTableEntity = DPSparkApp.getEntityByTableName(tableName);
        if (hbTableEntity == null) {
            throw new NotFoundException("没有找到相应的表");
        } else {
            final Broadcast<HBTableEntity> hbTableEntityBroadcast = DPSparkApp.getContext().broadcast(hbTableEntity);
            puts = puts.filter(new Function<Put, Boolean>() {
                public Boolean call(Put put) throws Exception {
                    Iterator var2 = put.getFamilyCellMap().values().iterator();

                    Iterator var4;
                    do {
                        if (!var2.hasNext()) {
                            return true;
                        }

                        List<Cell> cells = (List) var2.next();
                        var4 = cells.iterator();
                    } while (!var4.hasNext());

                    Cell cell = (Cell) var4.next();
                    String familyname = Bytes.toString(cell.getValueArray(), cell.getFamilyOffset(), cell.getFamilyLength());
                    HBcolumnfamilyEntity hBcolumnfamilyEntity = (HBcolumnfamilyEntity) ((HBTableEntity) hbTableEntityBroadcast.value()).getColumnfamilyList().stream().filter((c) -> {
                        return familyname.equals(c.getHbcolumnfamilyName());
                    }).findFirst().orElse((HBcolumnfamilyEntity) null);
                    if (hBcolumnfamilyEntity == null) {
                        //DPHbase.log.error("===========没有找到对应的列族信息");
                        return false;
                    } else {
                        String cellname = Bytes.toString(cell.getValueArray(), cell.getQualifierOffset(), cell.getQualifierLength());
                        if (hBcolumnfamilyEntity != null && hBcolumnfamilyEntity.getColumnList() != null && !hBcolumnfamilyEntity.getColumnList().isEmpty()) {
                            HBcolumnEntity hBcolumnEntity = (HBcolumnEntity) hBcolumnfamilyEntity.getColumnList().stream().filter((c) -> {
                                return cellname.equals(c.getHbcolumnName());
                            }).findFirst().orElse((HBcolumnEntity) null);
                            if (hBcolumnEntity != null) {
                                String value = Bytes.toString(cell.getValueArray(), cell.getValueOffset(), cell.getValueLength());
                                if (!DataTools.checkDataType(value, hBcolumnEntity.getHbcolumnType())) {
                                    //DPHbase.log.error("数据类型不符，需要的数据类型为：" + hBcolumnEntity.getHbcolumnType() + "传入的数据为：" + value);
                                    return false;
                                } else {
                                    return true;
                                }
                            } else {
                                //DPHbase.log.error("没有找到对应的列信息，查找的列名为：" + cellname);
                                return false;
                            }
                        } else {
                            //DPHbase.log.error("没有找到对应列族或者列的信息，查找的列族名为：" + familyname);
                            return false;
                        }
                    }
                }
            });
            Configuration configuration = DPSparkApp.getDpPermissionManager().initialHbaseSecurityContext();
            JavaHBaseContext hBaseContext = new JavaHBaseContext(DPSparkApp.getContext(), configuration);
            hBaseContext.bulkPut(puts, TableName.valueOf(hbTableEntity.getHbcurrenttablename()), new Function<Put, Put>() {
                public Put call(Put put) throws Exception {
                    return put;
                }
            });
//            String indexName = hbTableEntity.getHbcurrentindexname();
//            if (indexName != null && !indexName.isEmpty() && hbTableEntity.isHbtableIstwoLevelIndex()) {
//                DPEs.addIndexDistributed(indexName, buildJsonSourceByPutRdd(puts));
//            }

        }
    }
}
